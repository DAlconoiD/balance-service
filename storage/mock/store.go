// Code generated by MockGen. DO NOT EDIT.
// Source: balance_microservice/storage (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	models "github.com/dalconoid/balance-service/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockStore) GetBalance(arg0 int) (*models.Account, *models.CustomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(*models.CustomErr)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStoreMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStore)(nil).GetBalance), arg0)
}

// GetTransactionHistory mocks base method.
func (m *MockStore) GetTransactionHistory(arg0 int, arg1, arg2 string, arg3 int) ([]models.Transaction, *models.CustomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionHistory", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(*models.CustomErr)
	return ret0, ret1
}

// GetTransactionHistory indicates an expected call of GetTransactionHistory.
func (mr *MockStoreMockRecorder) GetTransactionHistory(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionHistory", reflect.TypeOf((*MockStore)(nil).GetTransactionHistory), arg0, arg1, arg2, arg3)
}

// MakeTransfer mocks base method.
func (m *MockStore) MakeTransfer(arg0 *models.TransferRequest) (*models.Transaction, *models.CustomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeTransfer", arg0)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(*models.CustomErr)
	return ret0, ret1
}

// MakeTransfer indicates an expected call of MakeTransfer.
func (mr *MockStoreMockRecorder) MakeTransfer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTransfer", reflect.TypeOf((*MockStore)(nil).MakeTransfer), arg0)
}

// UpdateBalance mocks base method.
func (m *MockStore) UpdateBalance(arg0 *models.ChangeBalanceRequest) (*models.Transaction, *models.CustomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", arg0)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(*models.CustomErr)
	return ret0, ret1
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockStoreMockRecorder) UpdateBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockStore)(nil).UpdateBalance), arg0)
}
